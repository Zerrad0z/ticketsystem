-- Drop existing tables if they exist
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AUDIT_LOG CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TICKET_COMMENT CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TICKET CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE USERS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Create sequences for ID generation
CREATE SEQUENCE USER_ID_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE TICKET_ID_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE COMMENT_ID_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE AUDIT_LOG_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Create Users table
CREATE TABLE USERS (
    ID NUMBER(19) PRIMARY KEY,
    USERNAME VARCHAR2(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(255) NOT NULL,
    ROLE VARCHAR2(20) NOT NULL CHECK (ROLE IN ('ROLE_EMPLOYEE', 'ROLE_IT_SUPPORT'))
);

-- Create Ticket table
CREATE TABLE TICKET (
    ID NUMBER(19) PRIMARY KEY,
    TITLE VARCHAR2(255) NOT NULL,
    DESCRIPTION VARCHAR2(1000) NOT NULL,
    PRIORITY VARCHAR2(10) NOT NULL CHECK (PRIORITY IN ('LOW', 'MEDIUM', 'HIGH')),
    CATEGORY VARCHAR2(20) NOT NULL CHECK (CATEGORY IN ('NETWORK', 'HARDWARE', 'SOFTWARE', 'OTHER')),
    STATUS VARCHAR2(20) NOT NULL CHECK (STATUS IN ('NEW', 'IN_PROGRESS', 'RESOLVED')),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    LAST_UPDATED TIMESTAMP,
    CREATED_BY_USER_ID NUMBER(19),
    CONSTRAINT FK_TICKET_USER FOREIGN KEY (CREATED_BY_USER_ID) REFERENCES USERS(ID)
);

-- Create TicketComment table
CREATE TABLE TICKET_COMMENT (
    ID NUMBER(19) PRIMARY KEY,
    CONTENT VARCHAR2(1000) NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    TICKET_ID NUMBER(19) NOT NULL,
    CREATED_BY_USER_ID NUMBER(19) NOT NULL,
    CONSTRAINT FK_COMMENT_TICKET FOREIGN KEY (TICKET_ID) REFERENCES TICKET(ID),
    CONSTRAINT FK_COMMENT_USER FOREIGN KEY (CREATED_BY_USER_ID) REFERENCES USERS(ID)
);

-- Create AuditLog table
CREATE TABLE AUDIT_LOG (
    ID NUMBER(19) PRIMARY KEY,
    ACTION VARCHAR2(255) NOT NULL,
    OLD_VALUE VARCHAR2(255),
    NEW_VALUE VARCHAR2(255),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    TICKET_ID NUMBER(19) NOT NULL,
    PERFORMED_BY_USER_ID NUMBER(19) NOT NULL,
    CONSTRAINT FK_AUDIT_TICKET FOREIGN KEY (TICKET_ID) REFERENCES TICKET(ID),
    CONSTRAINT FK_AUDIT_USER FOREIGN KEY (PERFORMED_BY_USER_ID) REFERENCES USERS(ID)
);

-- Create triggers for automatic ID generation
CREATE OR REPLACE TRIGGER USER_ID_TRIGGER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TICKET_ID_TRIGGER
BEFORE INSERT ON TICKET
FOR EACH ROW
BEGIN
    SELECT TICKET_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER COMMENT_ID_TRIGGER
BEFORE INSERT ON TICKET_COMMENT
FOR EACH ROW
BEGIN
    SELECT COMMENT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER AUDIT_LOG_ID_TRIGGER
BEFORE INSERT ON AUDIT_LOG
FOR EACH ROW
BEGIN
    SELECT AUDIT_LOG_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- Insert sample users
INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES
('employee1', '$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG', 'ROLE_EMPLOYEE');

INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES
('itsupport1', '$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG', 'ROLE_IT_SUPPORT');

-- Create indexes for better performance
CREATE INDEX IDX_TICKET_STATUS ON TICKET(STATUS);
CREATE INDEX IDX_TICKET_CREATED_BY ON TICKET(CREATED_BY_USER_ID);
CREATE INDEX IDX_COMMENT_TICKET ON TICKET_COMMENT(TICKET_ID);
CREATE INDEX IDX_AUDIT_TICKET ON AUDIT_LOG(TICKET_ID);